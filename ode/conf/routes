# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.home()

# Authentication
POST    /register                   controllers.Auth.register()
GET     /login                      controllers.Application.login()
POST    /login                      controllers.Auth.authenticate()
GET     /logout                     controllers.Application.logout()

# Browsing
GET     /rules                      controllers.Rules.rules()
GET     /rules/:name                controllers.Rules.rule(name: String)
GET     /rules/:name/similar        controllers.Rules.similar(name: String)
GET     /rules/:name/input          controllers.Rules.input(name: String)
GET     /rules/:name/output         controllers.Rules.output(name: String)

# Export
GET     /rules/:name/lhs            controllers.Rules.lhs(name: String)
GET     /rules/:name/rhs            controllers.Rules.rhs(name: String)

# Editing
POST    /rules                                            controllers.Rules.create()
PUT     /rules/:name/name                                 controllers.Rules.updateName(name: String)
PUT     /rules/:name/description                          controllers.Rules.updateDescription(name: String)
POST    /rules/:name/input                                controllers.Rules.addFeature(name: String)
PUT     /rules/:name/input                                controllers.Rules.updateFeatureValue(name: String)
DELETE  /rules/:name/input                                controllers.Rules.removeFeature(name: String)
POST    /rules/:name/groups/:gid/strings                  controllers.Rules.addString(name: String, gid: String)
PUT     /rules/:name/groups/:gid/strings/:sid             controllers.Rules.updateString(name: String, gid: String, sid: String)
DELETE  /rules/:name/groups/:gid/strings/:sid             controllers.Rules.removeString(name: String, gid: String, sid: String)
POST    /rules/:name/groups                               controllers.Rules.addGroup(name: String)
PUT     /rules/:name/groups/:gid                          controllers.Rules.updateGroup(name: String, gid: String)
DELETE  /rules/:name/groups/:gid                          controllers.Rules.removeGroup(name: String, gid: String)
POST    /rules/:name/groups/:gid/slots                    controllers.Rules.addSlot(name: String, gid: String)
DELETE  /rules/:name/groups/:gid/slots/:slid              controllers.Rules.removeSlot(name: String, gid: String, slid: String)
POST    /rules/:name/groups/:gid/slots/:slid/parts        controllers.Rules.addPart(name: String, gid: String, slid: String)
PUT     /rules/:name/groups/:gid/slots/:slid/parts/:pid   controllers.Rules.updatePart(name: String, gid: String, slid: String, pid: String)
DELETE  /rules/:name/groups/:gid/slots/:slid/parts/:pid   controllers.Rules.removePart(name: String, gid: String, slid: String, pid: String)
POST    /rules/:name/groups/:gid/slots/:slid/refs         controllers.Rules.addRef(name: String, gid: String, slid: String)
DELETE  /rules/:name/groups/:gid/slots/:slid/refs/:rid    controllers.Rules.removeRef(name: String, gid: String, slid: String, rid: String)
DELETE  /rules/:name                                      controllers.Rules.delete(name: String)

# Search
GET     /search                         controllers.Search.search()
POST    /search                         controllers.Search.doSearch()

# Features
GET     /features                       controllers.Features.list()
POST    /features                       controllers.Features.createFeature()
PUT     /features/:name/name            controllers.Features.updateName(name: String)
PUT     /features/:name/description     controllers.Features.updateDescription(name: String)
PUT     /features/:name/type            controllers.Features.updateType(name: String)
PUT     /features/:name/targets         controllers.Features.updateTargets(name: String)
DELETE  /features/:name                 controllers.Features.delete(name: String)
PUT     /values/:name                   controllers.Values.renameValue(name: String)

# Client-side routers
GET     /assets/js/featureRoutes    controllers.Features.javascriptRoutes()
GET     /assets/js/valueRoutes      controllers.Values.javascriptRoutes()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
